/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Reader;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author juankboix1309
 */
public class ReaderUI extends javax.swing.JFrame {

    /**
     * Creates new form ReaderUI
     */
    public ReaderUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(500, 385));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Construir automata y simular");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Introduzca Regex");

        jButton2.setText("Salir");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Nueva Regex");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setText("Nota: la Regex debe ingresarse con espacios, ej: ( A | B ) . C ");

        jLabel4.setText("Resultado de la simulacion en AFD directo:");

        jLabel5.setText("Introduzca Cadena");

        jLabel6.setText("Nota: La cadena tambien debe ingresarse con espacios ");

        jLabel7.setText("Resultado de la simulacion en AFD subconjuntos:");

        jLabel8.setText("Resultado de la simulacion en AFN:");

        jLabel9.setText("Resultado de la simulacion en AFD directo minimo:");

        jLabel10.setText("Resultado de la simulacion en AFD subconjuntos minimo:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(222, 222, 222)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)
                                .addGap(32, 32, 32)
                                .addComponent(jButton2)
                                .addGap(38, 38, 38))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addGap(8, 8, 8)
                .addComponent(jLabel3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jTextField1.setText("");
        jTextField3.setText("");
        Count.count = 0;
        jLabel2.setText("Nota: la Regex debe ingresarse con espacios, ej: ( A | B ) Ç C ");
        jLabel4.setText("Resultado de la simulacion:");
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        //Construccion de arbol sintactico para Thompson y Construccion Directa
        RegexTreeConstruction Arbol = new RegexTreeConstruction();        
        RegexTreeConstruction Directa = new RegexTreeConstruction();
        //Algoritmo de Shunting-Yard para pasar de infix a postfix
        ShuntingYard _Parser =  new ShuntingYard();
        String _Regex = jTextField1.getText();
        String forDirecta = "( " + _Regex + " ) Ç #";
        String PostFixeado = _Parser.infixToPostfix(_Regex);
        String PostFixeadoDirecta = _Parser.infixToPostfix(forDirecta);
        String PostFixeadoDirectaFinal = PostFixeadoDirecta.trim();
        System.out.println(PostFixeadoDirectaFinal);
        String PostFixeadoFinal = PostFixeado.trim();
        try
        {
            for (String s : PostFixeadoDirectaFinal.split("\\s"))
            {
                Directa.add(s);
            }
            for (String value : PostFixeadoFinal.split("\\s"))
            {
                Arbol.add(value);   
            }
            Directa.postOrder(Directa._root);
            
            //Generacion de AFN por Construccion de Thompson, con grafo dibujado y archivo de texto
            long startTime1 = System.nanoTime();
            Automata AutFinal = Arbol.getAutomataFinal();
            //AutFinal.toGraph("AFN");
            long stopTime1 = System.nanoTime();
            long duration1 = (stopTime1-startTime1)/1000000;
            System.out.println("Tiempo de generacion AFN: " + String.valueOf(duration1) + " milisegundos");
            try {
            AutFinal.ToTxtFile();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ReaderUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(ReaderUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Generacion de AFD por Contruccion Directa, con grafo dibujado y archivo de texto
            long startTime5 = System.nanoTime();
            AFD AutFinalCD = Directa.DirectConstruction();
            long stopTime5 = System.nanoTime();
            long duration5 = (stopTime5-startTime5)/1000000;
            System.out.println("Tiempo de generacion AFD Directo: " + String.valueOf(duration5) + " milisegundos");
            AutFinalCD.ToTxtFile("AFDDirecto");
            //AutFinalCD.toGraph("AFDDirecto");
            
            //Minimizacion AFD Directo por particiones, con grafo dibujado y archivo de texto
            long startTime6 = System.nanoTime();
            AFD AutFinalCDMin = AutFinalCD.Minimizar();
            long stopTime6 = System.nanoTime();
            long duration6 = (stopTime6-startTime6)/1000000;
            System.out.println("Tiempo de Minimizacion AFD Directo: " + String.valueOf(duration6) + " milisegundos");
            AutFinalCDMin.ToTxtFile("AFDDirectoMin");
            //AutFinalCDMin.toGraph("AFDDirectoMin");
            
            //Construccion de AFD por subconjuntos, con grafo dibujado y archivo de texto
            long startTime2 = System.nanoTime();
            AFD AutFinalD = AutFinal.toAFD();
            long stopTime2 = System.nanoTime();
            long duration2 = (stopTime2-startTime2)/1000000;
            System.out.println("Tiempo de construccion AFD: " + String.valueOf(duration2) + " milisegundos");
            AutFinalD.ToTxtFile("AFDSubSet");
            //AutFinalD.toGraph("AFDSubSet");
            
            //Minimizacion de AFD Minimo por subconjuntos, con grafo dibujado y archivo de texto
            long startTime7 = System.nanoTime();
            AFD AFDMinFinal = AutFinalD.Minimizar();
            long stopTime7 = System.nanoTime();
            long duration7 = (stopTime7-startTime7)/1000000;
            System.out.println("Tiempo de construccion AFD: " + String.valueOf(duration7) + " milisegundos");
            AFDMinFinal.ToTxtFile("AFDMin");
            //AFDMinFinal.toGraph("AFDMin");
            
            //Simulacion de cadena en todos los automatas
            String cadena = jTextField3.getText();
            long startTime3 = System.nanoTime();
            boolean Sim1 = AutFinal.simulacion(cadena);
            long stopTime3 = System.nanoTime();
            long duration3 = (stopTime3-startTime3)/1000000;
            System.out.println("Tiempo de simulacion AFN: " + String.valueOf(duration3) + " milisegundos");
            
            if(Sim1 == true)
            {
                jLabel8.setText("Resultado de la simulacion en AFN: Aceptada");
            }
            else
            {
                jLabel8.setText("Resultado de la simulacion en AFN: No Aceptada");
            }
            
            long startTime4 = System.nanoTime();
            boolean Sim2 = AutFinalD.simulacion(cadena);
            long stopTime4 = System.nanoTime();
            long duration4 = (stopTime4-startTime4)/1000000;
            System.out.println("Tiempo de simulacion AFD Subconjuntos: " + String.valueOf(duration4) + " milisegundos");
            
            if(Sim2 == true)
            {
                jLabel7.setText("Resultado de la simulacion en AFD subconjuntos: Aceptada");
            }
            else
            {
                jLabel7.setText("Resultado de la simulacion en AFD subconjuntos: No Aceptada");
            }
            
            long startTime8 = System.nanoTime();
            boolean Sim3 = AutFinalCD.simulacion(cadena);
            long stopTime8 = System.nanoTime();
            long duration8 = (stopTime8-startTime8)/1000000;
            System.out.println("Tiempo de simulacion AFD Directo: " + String.valueOf(duration8) + " milisegundos");
            
            if(Sim3 == true)
            {
                jLabel4.setText("Resultado de la simulacion en AFD Directo: Aceptada");
            }
            else
            {
                jLabel4.setText("Resultado de la simulacion en AFD Directo: No Aceptada");
            }
            
            long startTime9 = System.nanoTime();
            boolean Sim4 = AutFinalCDMin.simulacion(cadena);
            long stopTime9 = System.nanoTime();
            long duration9 = (stopTime9-startTime9)/1000000;
            System.out.println("Tiempo de simulacion AFD Directo minimo: " + String.valueOf(duration9) + " milisegundos");
            
            if(Sim4 == true)
            {
                jLabel9.setText("Resultado de la simulacion en AFD Directo minimo: Aceptada");
            }
            else
            {
                jLabel9.setText("Resultado de la simulacion en AFD Directo minimo: No Aceptada");
            }
            
            long startTime10 = System.nanoTime();
            boolean Sim5 = AFDMinFinal.simulacion(cadena);
            long stopTime10 = System.nanoTime();
            long duration10 = (stopTime10-startTime10)/1000000;
            System.out.println("Tiempo de simulacion AFD Subconjuntos minimo: " + String.valueOf(duration10) + " milisegundos");
            
            if(Sim5 == true)
            {
                jLabel10.setText("Resultado de la simulacion en AFD Subconjuntos minimo: Aceptada");
            }
            else
            {
                jLabel10.setText("Resultado de la simulacion en AFD Subconjuntos minimo: No Aceptada");
            }
            
            
            
        }
        catch(Exception E)
        {
            jLabel2.setText("Su Ingreso es Incorrecto");
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReaderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReaderUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
